"""
Tests for functions in dotplot script
"""
from unittest.mock import patch

from dotplot import (get_lines_from_file, check_fasta_lines,
                     get_sequence_from_fasta_lines, create_matches_table,
                     filter_matches, ascii_filter, find_palindromes,
                     create_complement_table, merge_tables)


def mocked_get_lines_from_file(contents):
    """Mocked get_lines_from_file for testing"""
    lines = contents.splitlines()
    return lines


with patch('dotplot.get_lines_from_file',
           side_effect=mocked_get_lines_from_file) as get_lines_from_file:

    def test_get_lines_from_file_with_no_lines():
        """Test for get_lines_from_file"""
        assert get_lines_from_file('') == []

    def test_get_lines_from_file_with_one_line():
        """Test for get_lines_from_file"""
        one_line_string = 'This is the first line'
        assert get_lines_from_file(one_line_string) == [
            'This is the first line']

    def test_get_lines_from_file_with_multiple_lines():
        """Test for get_lines_from_file"""
        multiline_string = ('This is the first line\nThis is the second line\n'
                            'This is the third line')
        assert get_lines_from_file(multiline_string) == [
            'This is the first line',
            'This is the second line',
            'This is the third line']


def test_check_fasta_lines_correct():
    """Test for check_fasta_lines"""
    lines = ['>ID', 'ATCG']
    assert check_fasta_lines(lines)


def test_check_fasta_lines_empty():
    """Test for check_fasta_lines"""
    lines = []
    assert not check_fasta_lines(lines)


def test_check_fasta_lines_lowercase():
    """Test for check_fasta_lines"""
    lines = ['>ID', 'atcg']
    assert not check_fasta_lines(lines)


def test_check_fasta_lines_no_id():
    """Test for check_fasta_lines"""
    lines = ['ID', 'ATCG']
    assert not check_fasta_lines(lines)


def test_check_fasta_lines_blank_line():
    """Test for check_fasta_lines"""
    lines = ['>ID', '']
    assert not check_fasta_lines(lines)


def test_get_sequence_from_fasta_lines_single():
    """Test for get_sequence_from_fasta_lines"""
    lines = ['>ID', 'ATCG']
    assert get_sequence_from_fasta_lines(lines) == 'ATCG'


def test_get_sequence_from_fasta_lines_with_concatenation():
    """Test for get_sequence_from_fasta_lines"""
    lines = ['>ID', 'ATCG', 'ATCGATCG', 'A']
    assert get_sequence_from_fasta_lines(lines) == 'ATCGATCGATCGA'


def test_create_matches_table():
    """Test for create_matches_table"""
    seq_y = 'GGTCATTCAGGA'
    seq_x = 'AGGATCAAAC'
    assert create_matches_table(seq_y, seq_x) == [
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' ']
        ]


def test_filter_matches():
    """Test for filter_matches"""
    table = [
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' ']
        ]
    assert filter_matches(table) == [
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'c'],
        ['a', ' ', ' ', 'A', ' ', ' ', 'A', 'a', 'a', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'c'],
        ['A', ' ', ' ', 'a', ' ', ' ', 'A', 'a', 'a', ' '],
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['a', ' ', ' ', 'A', ' ', ' ', 'a', 'a', 'a', ' ']
        ]


def test_ascii_filter_backslash():
    """Test for ascii_filter"""
    table = [
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'c'],
        ['a', ' ', ' ', 'A', ' ', ' ', 'A', 'a', 'a', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'c'],
        ['A', ' ', ' ', 'a', ' ', ' ', 'A', 'a', 'a', ' '],
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['a', ' ', ' ', 'A', ' ', ' ', 'a', 'a', 'a', ' ']
        ]
    assert ascii_filter(table, '\\') == [
        [' ', '\\', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '.', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', '.'],
        ['.', ' ', ' ', '\\', ' ', ' ', '\\', '.', '.', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', '.'],
        ['\\', ' ', ' ', '.', ' ', ' ', '\\', '.', '.', ' '],
        [' ', '\\', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '.', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['.', ' ', ' ', '\\', ' ', ' ', '.', '.', '.', ' ']
        ]


def test_ascii_filter_foward_slash():
    """Test for ascii_filter"""
    table = [
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 't', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'c', ' ', ' ', ' ', 'C'],
        ['a', ' ', ' ', 'a', ' ', ' ', 'a', 'a', 'A', ' '],
        [' ', ' ', ' ', ' ', 't', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 't', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'c', ' ', ' ', ' ', 'C'],
        ['a', ' ', ' ', 'A', ' ', ' ', 'a', 'a', 'A', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['A', ' ', ' ', 'a', ' ', ' ', 'a', 'a', 'a', ' ']
        ]
    assert ascii_filter(table, '/') == [
        [' ', '.', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '/', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', '/'],
        ['.', ' ', ' ', '.', ' ', ' ', '.', '.', '/', ' '],
        [' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', '/'],
        ['.', ' ', ' ', '/', ' ', ' ', '.', '.', '/', ' '],
        [' ', '.', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '/', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['/', ' ', ' ', '.', ' ', ' ', '.', '.', '.', ' ']
        ]


def test_find_palindromes():
    """Test for find_palindromes"""
    table = [
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'A', 'A', ' ']
        ]
    assert find_palindromes(table) == [
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 't', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'c', ' ', ' ', ' ', 'C'],
        ['a', ' ', ' ', 'a', ' ', ' ', 'a', 'a', 'A', ' '],
        [' ', ' ', ' ', ' ', 't', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 't', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'c', ' ', ' ', ' ', 'C'],
        ['a', ' ', ' ', 'A', ' ', ' ', 'a', 'a', 'A', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['A', ' ', ' ', 'a', ' ', ' ', 'a', 'a', 'a', ' ']
        ]


def test_create_complement_table():
    """Test for create_complement_table"""
    seq_y = 'GGTCATTCAGGA'
    seq_x = 'AGGAUCAAAC'
    assert create_complement_table(seq_y, seq_x) == [
        [' ', ' ', ' ', ' ', ' ', 'X', ' ', ' ', ' ', 'X'],
        [' ', ' ', ' ', ' ', ' ', 'X', ' ', ' ', ' ', 'X'],
        ['X', ' ', ' ', 'X', ' ', ' ', 'X', 'X', 'X', ' '],
        [' ', 'X', 'X', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'X', ' ', ' ', ' ', ' ', ' '],
        ['X', ' ', ' ', 'X', ' ', ' ', 'X', 'X', 'X', ' '],
        ['X', ' ', ' ', 'X', ' ', ' ', 'X', 'X', 'X', ' '],
        [' ', 'X', 'X', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'X', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'X', ' ', ' ', ' ', 'X'],
        [' ', ' ', ' ', ' ', ' ', 'X', ' ', ' ', ' ', 'X'],
        [' ', ' ', ' ', ' ', 'X', ' ', ' ', ' ', ' ', ' '],
        ]


def test_merge_tables_filtered():
    """Test for merge_tables"""
    table_1 = [
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'c'],
        ['a', ' ', ' ', 'A', ' ', ' ', 'A', 'a', 'a', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'c'],
        ['A', ' ', ' ', 'a', ' ', ' ', 'A', 'a', 'a', ' '],
        [' ', 'G', 'g', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'g', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['a', ' ', ' ', 'A', ' ', ' ', 'a', 'a', 'a', ' ']
        ]
    table_2 = [
        [' ', ' ', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C'],
        ['a', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'A', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C'],
        [' ', ' ', ' ', 'A', ' ', ' ', ' ', 'a', 'A', ' '],
        [' ', ' ', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['A', ' ', ' ', ' ', ' ', ' ', 'a', 'a', 'a', ' ']
        ]
    assert merge_tables(table_1, table_2) == [
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['a', ' ', ' ', 'A', ' ', ' ', 'A', 'a', 'A', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', 'T', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', 'C', ' ', ' ', ' ', 'C'],
        ['A', ' ', ' ', 'A', ' ', ' ', 'A', 'a', 'A', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', 'G', 'G', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['A', ' ', ' ', 'A', ' ', ' ', 'a', 'a', 'a', ' ']
        ]


def test_merge_tables_ascii():
    """Test for merge_tables"""
    table_1 = [
        [' ', '\\', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '.', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', '.'],
        ['.', ' ', ' ', '\\', ' ', ' ', '\\', '.', '.', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', '.'],
        ['\\', ' ', ' ', '.', ' ', ' ', '\\', '.', '.', ' '],
        [' ', '\\', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '.', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['.', ' ', ' ', '\\', ' ', ' ', '.', '.', '.', ' ']
        ]
    table_2 = [
        [' ', '.', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '/', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', '/'],
        ['.', ' ', ' ', '.', ' ', ' ', '.', '.', '/', ' '],
        [' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', '/'],
        ['.', ' ', ' ', '/', ' ', ' ', '.', '.', '/', ' '],
        [' ', '.', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '/', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['/', ' ', ' ', '.', ' ', ' ', '.', '.', '.', ' ']
        ]
    assert merge_tables(table_1, table_2) == [
        [' ', '\\', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '/', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', '/'],
        ['.', ' ', ' ', '\\', ' ', ' ', '\\', '.', '/', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', '/'],
        ['\\', ' ', ' ', '/', ' ', ' ', '\\', '.', '/', ' '],
        [' ', '\\', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', '/', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['/', ' ', ' ', '\\', ' ', ' ', '.', '.', '.', ' ']
        ]
